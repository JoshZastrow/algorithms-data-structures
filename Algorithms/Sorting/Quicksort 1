def qsort(arr):
    low = 0
    high = len(arr) - 1
    _sort(arr, low, high)

    return arr

def _sort(arr, low, high):

    if low < high:
        pivot = partition(arr, low, high)
        _sort(arr, low, pivot - 1)
        _sort(arr, pivot + 1, high)

    return arr


def partition(arr, low, high):

    pivot = arr[high]
    # swap location
    i = low - 1
    # swap values less than the pivot
    for j in range(low, high):

        if arr[j] <= pivot:

            # increment the swapping location
            i += 1
            arr[j], arr[i] = arr[i], arr[j]

    # swap the pivot with the next swapping location
    i += 1
    arr[i], arr[high] = arr[high], arr[i]

    return i


a = [3, 5, 7, 1, 2, 5, 9, 4]
print(a)
print(qsort(a))

